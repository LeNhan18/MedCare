"""
Medical Chatbot Pipeline
K·∫øt h·ª£p 4 models ƒë·ªÉ t·∫°o th√†nh chatbot y t·∫ø ho√†n ch·ªânh
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models.intent_classifier import IntentClassifier
from models.symptom_extractor import SymptomExtractor
from models.drug_recommender import DrugRecommender
from models.risk_checker import RiskChecker
import yaml
import json

class MedicalChatbotPipeline:
    def __init__(self, config_path="config.yaml"):
        self.config_path = config_path
        
        # Initialize all models
        print("ƒêang kh·ªüi t·∫°o Medical Chatbot Pipeline...")
        
        try:
            self.intent_classifier = IntentClassifier(config_path)
            print("‚úÖ Intent Classifier ƒë√£ s·∫µn s√†ng")
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o Intent Classifier: {e}")
            self.intent_classifier = None
        
        try:
            self.symptom_extractor = SymptomExtractor(config_path)
            print("‚úÖ Symptom Extractor ƒë√£ s·∫µn s√†ng")
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o Symptom Extractor: {e}")
            self.symptom_extractor = None
        
        try:
            self.drug_recommender = DrugRecommender(config_path)
            print("‚úÖ Drug Recommender ƒë√£ s·∫µn s√†ng")
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o Drug Recommender: {e}")
            self.drug_recommender = None
        
        try:
            self.risk_checker = RiskChecker(config_path)
            print("‚úÖ Risk Checker ƒë√£ s·∫µn s√†ng")
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o Risk Checker: {e}")
            self.risk_checker = None
        
        print("üöÄ Medical Chatbot Pipeline ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!")
    
    def process_message(self, user_message, user_profile=None):
        """
        X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng qua pipeline 4 models
        
        Args:
            user_message (str): Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
            user_profile (dict): Th√¥ng tin ng∆∞·ªùi d√πng (tu·ªïi, gi·ªõi, b·ªánh n·ªÅn, thu·ªëc ƒëang d√πng)
        
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω t·ª´ pipeline
        """
        print(f"üì® X·ª≠ l√Ω tin nh·∫Øn: '{user_message}'")
        
        result = {
            'user_message': user_message,
            'user_profile': user_profile,
            'processing_steps': [],
            'final_response': '',
            'recommendations': [],
            'warnings': []
        }
        
        try:
            # Step 1: Intent Classification
            print("üîç Step 1: Ph√¢n lo·∫°i √Ω ƒë·ªãnh...")
            if self.intent_classifier:
                intent_result = self.intent_classifier.predict(user_message)
                result['intent'] = intent_result
                result['processing_steps'].append({
                    'step': 1,
                    'name': 'Intent Classification',
                    'result': intent_result
                })
                print(f"   Intent: {intent_result['intent']} (confidence: {intent_result['confidence']:.3f})")
            else:
                # Fallback: simple rule-based intent detection
                intent_result = self._fallback_intent_detection(user_message)
                result['intent'] = intent_result
                print(f"   Intent (fallback): {intent_result['intent']}")
            
            # Step 2: Entity Extraction (n·∫øu intent li√™n quan ƒë·∫øn tri·ªáu ch·ª©ng)
            entities = []
            if result['intent']['intent'] in ['tri·ªáu_ch·ª©ng', 't∆∞_v·∫•n_s·ª≠_d·ª•ng']:
                print("üè∑Ô∏è Step 2: Tr√≠ch xu·∫•t th·ª±c th·ªÉ y t·∫ø...")
                if self.symptom_extractor:
                    entity_result = self.symptom_extractor.predict(user_message)
                    entities = entity_result['entities']
                    result['entities'] = entity_result
                    result['processing_steps'].append({
                        'step': 2,
                        'name': 'Entity Extraction',
                        'result': entity_result
                    })
                    print(f"   T√¨m th·∫•y {len(entities)} entities:")
                    for entity in entities:
                        print(f"     - {entity['text']} ({entity['entity']})")
                else:
                    # Fallback: simple keyword extraction
                    entities = self._fallback_entity_extraction(user_message)
                    result['entities'] = {'entities': entities}
                    print(f"   Entities (fallback): {[e['text'] for e in entities]}")
            
            # Step 3: Drug Recommendation (n·∫øu c√≥ tri·ªáu ch·ª©ng)
            drug_recommendations = []
            if result['intent']['intent'] in ['tri·ªáu_ch·ª©ng'] and entities:
                print("üíä Step 3: G·ª£i √Ω thu·ªëc...")
                if self.drug_recommender:
                    # T·∫°o text t·ª´ c√°c symptoms ƒë∆∞·ª£c tr√≠ch xu·∫•t
                    symptom_texts = []
                    for entity in entities:
                        if entity['entity'] == 'SYMPTOM':
                            symptom_texts.append(entity['text'])
                    
                    if symptom_texts:
                        symptoms_combined = ', '.join(symptom_texts)
                        drug_recommendations = self.drug_recommender.recommend_drugs(
                            symptoms_combined, user_profile
                        )
                        
                        result['drug_recommendations'] = drug_recommendations
                        result['processing_steps'].append({
                            'step': 3,
                            'name': 'Drug Recommendation',
                            'result': drug_recommendations
                        })
                        print(f"   G·ª£i √Ω {len(drug_recommendations)} thu·ªëc:")
                        for drug in drug_recommendations:
                            print(f"     - {drug['drug_name']} (score: {drug.get('similarity_score', 'N/A')})")
            
            # Step 4: Risk Checking (cho t·ª´ng thu·ªëc ƒë∆∞·ª£c g·ª£i √Ω)
            risk_results = []
            if drug_recommendations and user_profile:
                print("‚ö†Ô∏è Step 4: Ki·ªÉm tra r·ªßi ro...")
                if self.risk_checker:
                    for drug in drug_recommendations:
                        risk_result = self.risk_checker.check_risk_rule_based(
                            drug['drug_name'], user_profile
                        )
                        drug['risk_assessment'] = risk_result
                        risk_results.append({
                            'drug_name': drug['drug_name'],
                            'risk_result': risk_result
                        })
                        
                        print(f"     {drug['drug_name']}: {risk_result['risk_level']}")
                        if risk_result['warnings']:
                            for warning in risk_result['warnings']:
                                print(f"       ‚ö†Ô∏è {warning['description']}")
                    
                    result['risk_assessments'] = risk_results
                    result['processing_steps'].append({
                        'step': 4,
                        'name': 'Risk Assessment',
                        'result': risk_results
                    })
            
            # Generate final response
            result['final_response'] = self._generate_response(result)
            print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω!")
            
        except Exception as e:
            print(f"‚ùå L·ªói trong pipeline: {e}")
            result['error'] = str(e)
            result['final_response'] = "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i."
        
        return result
    
    def _fallback_intent_detection(self, message):
        """Ph√°t hi·ªán intent ƒë∆°n gi·∫£n khi kh√¥ng c√≥ model"""
        message_lower = message.lower()
        
        # Keywords cho t·ª´ng intent
        symptom_keywords = ['b·ªã', 'ƒëau', 's·ªët', 'ho', 'ngh·∫πt', 'ch·∫£y', 'ng·ª©a', 'bu·ªìn n√¥n', 'ti√™u ch·∫£y']
        drug_info_keywords = ['thu·ªëc', 'paracetamol', 'ibuprofen', 't√°c d·ª•ng', 'c√¥ng d·ª•ng']
        usage_keywords = ['c√≥ th·ªÉ', 'u·ªëng', 'd√πng', 's·ª≠ d·ª•ng', 'khi n√†o']
        disease_keywords = ['b·ªánh', 'nguy hi·ªÉm', 'tri·ªáu ch·ª©ng c·ªßa']
        
        if any(keyword in message_lower for keyword in symptom_keywords):
            return {'intent': 'tri·ªáu_ch·ª©ng', 'confidence': 0.8}
        elif any(keyword in message_lower for keyword in drug_info_keywords):
            return {'intent': 'tra_c·ª©u_thu·ªëc', 'confidence': 0.8}
        elif any(keyword in message_lower for keyword in usage_keywords):
            return {'intent': 't∆∞_v·∫•n_s·ª≠_d·ª•ng', 'confidence': 0.8}
        elif any(keyword in message_lower for keyword in disease_keywords):
            return {'intent': 'th√¥ng_tin_b·ªánh', 'confidence': 0.8}
        else:
            return {'intent': 'kh√°c', 'confidence': 0.6}
    
    def _fallback_entity_extraction(self, message):
        """Tr√≠ch xu·∫•t entity ƒë∆°n gi·∫£n khi kh√¥ng c√≥ model"""
        message_lower = message.lower()
        entities = []
        
        # Common symptoms
        symptom_dict = {
            'ƒëau ƒë·∫ßu': 'SYMPTOM',
            's·ªët': 'SYMPTOM',
            'ho': 'SYMPTOM',
            'ngh·∫πt m≈©i': 'SYMPTOM',
            'ch·∫£y n∆∞·ªõc m≈©i': 'SYMPTOM',
            'ƒëau b·ª•ng': 'SYMPTOM',
            'bu·ªìn n√¥n': 'SYMPTOM',
            'ti√™u ch·∫£y': 'SYMPTOM',
            'ng·ª©a': 'SYMPTOM',
            'vi√™m': 'SYMPTOM'
        }
        
        for symptom, entity_type in symptom_dict.items():
            if symptom in message_lower:
                entities.append({
                    'text': symptom,
                    'entity': entity_type
                })
        
        return entities
    
    def _generate_response(self, result):
        """T·∫°o ph·∫£n h·ªìi cu·ªëi c√πng d·ª±a tr√™n k·∫øt qu·∫£ pipeline"""
        intent = result['intent']['intent']
        response_parts = []
        
        if intent == 'tri·ªáu_ch·ª©ng':
            # Ph·∫£n h·ªìi cho tri·ªáu ch·ª©ng
            entities = result.get('entities', {}).get('entities', [])
            symptoms = [e['text'] for e in entities if e['entity'] == 'SYMPTOM']
            
            if symptoms:
                response_parts.append(f"T√¥i hi·ªÉu b·∫°n ƒëang g·∫∑p c√°c tri·ªáu ch·ª©ng: {', '.join(symptoms)}.")
                
                # Th√™m g·ª£i √Ω thu·ªëc n·∫øu c√≥
                drug_recommendations = result.get('drug_recommendations', [])
                if drug_recommendations:
                    response_parts.append("\nüè• **G·ª£i √Ω thu·ªëc OTC c√≥ th·ªÉ gi√∫p:**")
                    
                    for i, drug in enumerate(drug_recommendations, 1):
                        drug_info = f"\n{i}. **{drug['drug_name']}** ({drug['active_ingredient']})"
                        drug_info += f"\n   - C√¥ng d·ª•ng: {drug['medical_condition']}"
                        drug_info += f"\n   - Li·ªÅu d√πng: {drug['dosage']}"
                        
                        # Th√™m ƒë√°nh gi√° r·ªßi ro n·∫øu c√≥
                        risk_assessment = drug.get('risk_assessment')
                        if risk_assessment:
                            if risk_assessment['risk_level'] == 'contraindicated':
                                drug_info += f"\n   - ‚ùå **KH√îNG N√äN D√ôNG** - C√≥ ch·ªëng ch·ªâ ƒë·ªãnh"
                            elif risk_assessment['risk_level'] == 'caution':
                                drug_info += f"\n   - ‚ö†Ô∏è **C·∫ßn th·∫≠n tr·ªçng** - C√≥ c·∫£nh b√°o"
                            else:
                                drug_info += f"\n   - ‚úÖ C√≥ th·ªÉ s·ª≠ d·ª•ng an to√†n"
                        
                        response_parts.append(drug_info)
                    
                    response_parts.append("\n‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng:**")
                    response_parts.append("- ƒê√¢y ch·ªâ l√† g·ª£i √Ω thu·ªëc kh√¥ng k√™ ƒë∆°n (OTC)")
                    response_parts.append("- ƒê·ªçc k·ªπ h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng tr∆∞·ªõc khi d√πng")
                    response_parts.append("- N·∫øu tri·ªáu ch·ª©ng k√©o d√†i ho·∫∑c n·∫∑ng h∆°n, h√£y ƒë·∫øn g·∫∑p b√°c sƒ©")
                else:
                    response_parts.append("\nT√¥i ch∆∞a th·ªÉ g·ª£i √Ω thu·ªëc c·ª• th·ªÉ. B·∫°n n√™n tham kh·∫£o √Ω ki·∫øn d∆∞·ª£c sƒ© ho·∫∑c b√°c sƒ©.")
            else:
                response_parts.append("T√¥i ch∆∞a r√µ tri·ªáu ch·ª©ng c·ª• th·ªÉ b·∫°n ƒëang g·∫∑p. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n kh√¥ng?")
        
        elif intent == 'tra_c·ª©u_thu·ªëc':
            response_parts.append("B·∫°n mu·ªën tra c·ª©u th√¥ng tin v·ªÅ thu·ªëc n√†o? T√¥i c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ:")
            response_parts.append("- C√¥ng d·ª•ng v√† c√°ch s·ª≠ d·ª•ng")
            response_parts.append("- Li·ªÅu l∆∞·ª£ng khuy·∫øn ngh·ªã")
            response_parts.append("- Ch·ªëng ch·ªâ ƒë·ªãnh v√† c·∫£nh b√°o")
            response_parts.append("- T∆∞∆°ng t√°c thu·ªëc")
        
        elif intent == 't∆∞_v·∫•n_s·ª≠_d·ª•ng':
            response_parts.append("ƒê·ªÉ t∆∞ v·∫•n v·ªÅ vi·ªác s·ª≠ d·ª•ng thu·ªëc, t√¥i c·∫ßn bi·∫øt:")
            response_parts.append("- Thu·ªëc b·∫°n mu·ªën s·ª≠ d·ª•ng")
            response_parts.append("- Tri·ªáu ch·ª©ng hi·ªán t·∫°i")
            response_parts.append("- ƒê·ªô tu·ªïi v√† th√¥ng tin s·ª©c kh·ªèe")
            response_parts.append("- C√°c thu·ªëc kh√°c ƒëang s·ª≠ d·ª•ng (n·∫øu c√≥)")
        
        elif intent == 'th√¥ng_tin_b·ªánh':
            response_parts.append("T√¥i c√≥ th·ªÉ cung c·∫•p th√¥ng tin c∆° b·∫£n v·ªÅ c√°c b·ªánh ph·ªï bi·∫øn.")
            response_parts.append("Tuy nhi√™n, ƒë·ªÉ ch·∫©n ƒëo√°n ch√≠nh x√°c v√† ƒëi·ªÅu tr·ªã hi·ªáu qu·∫£, ")
            response_parts.append("b·∫°n n√™n tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© chuy√™n khoa.")
        
        else:
            response_parts.append("Xin ch√†o! T√¥i l√† chatbot y t·∫ø, c√≥ th·ªÉ gi√∫p b·∫°n:")
            response_parts.append("- G·ª£i √Ω thu·ªëc OTC cho c√°c tri·ªáu ch·ª©ng th∆∞·ªùng g·∫∑p")
            response_parts.append("- Tra c·ª©u th√¥ng tin thu·ªëc")
            response_parts.append("- T∆∞ v·∫•n s·ª≠ d·ª•ng thu·ªëc an to√†n")
            response_parts.append("- Cung c·∫•p th√¥ng tin b·ªánh c∆° b·∫£n")
            response_parts.append("\nB·∫°n c√≥ tri·ªáu ch·ª©ng g√¨ c·∫ßn t∆∞ v·∫•n kh√¥ng?")
        
        return ''.join(response_parts)
    
    def load_all_models(self):
        """Load t·∫•t c·∫£ models ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán"""
        print("üìÇ ƒêang load c√°c models...")
        
        if self.intent_classifier:
            try:
                self.intent_classifier.load_model()
                print("‚úÖ Intent Classifier loaded")
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ load Intent Classifier: {e}")
        
        if self.symptom_extractor:
            try:
                self.symptom_extractor.load_model()
                print("‚úÖ Symptom Extractor loaded")
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ load Symptom Extractor: {e}")
        
        if self.drug_recommender:
            try:
                self.drug_recommender.load_model()
                print("‚úÖ Drug Recommender loaded")
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ load Drug Recommender: {e}")
        
        if self.risk_checker:
            try:
                self.risk_checker.load_model()
                print("‚úÖ Risk Checker loaded")
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ load Risk Checker: {e}")
    
    def get_pipeline_status(self):
        """L·∫•y tr·∫°ng th√°i c·ªßa pipeline"""
        status = {
            'intent_classifier': self.intent_classifier is not None,
            'symptom_extractor': self.symptom_extractor is not None,
            'drug_recommender': self.drug_recommender is not None,
            'risk_checker': self.risk_checker is not None
        }
        
        active_models = sum(status.values())
        status['total_active'] = active_models
        status['ready'] = active_models >= 2  # C·∫ßn √≠t nh·∫•t 2 models ƒë·ªÉ ho·∫°t ƒë·ªông c∆° b·∫£n
        
        return status


# Example usage v√† test
if __name__ == "__main__":
    # Test cases
    test_messages = [
        "T√¥i b·ªã ƒëau ƒë·∫ßu v√† s·ªët",
        "Thu·ªëc Paracetamol c√≥ t√°c d·ª•ng g√¨?",
        "T√¥i c√≥ th·ªÉ u·ªëng ibuprofen khi b·ªã c·∫£m kh√¥ng?",
        "B·ªánh ti·ªÉu ƒë∆∞·ªùng c√≥ nguy hi·ªÉm kh√¥ng?",
        "Xin ch√†o"
    ]
    
    # Test user profile
    test_profile = {
        'age': 28,
        'gender': 'female',
        'existing_conditions': ['d·ªã ·ª©ng aspirin'],
        'current_drugs': [],
        'pregnancy': {'is_pregnant': False}
    }
    
    # Initialize pipeline
    print("ü§ñ Kh·ªüi t·∫°o Medical Chatbot Pipeline...")
    pipeline = MedicalChatbotPipeline()
    
    # Check status
    status = pipeline.get_pipeline_status()
    print(f"\nüìä Tr·∫°ng th√°i Pipeline:")
    print(f"   - Intent Classifier: {'‚úÖ' if status['intent_classifier'] else '‚ùå'}")
    print(f"   - Symptom Extractor: {'‚úÖ' if status['symptom_extractor'] else '‚ùå'}")
    print(f"   - Drug Recommender: {'‚úÖ' if status['drug_recommender'] else '‚ùå'}")
    print(f"   - Risk Checker: {'‚úÖ' if status['risk_checker'] else '‚ùå'}")
    print(f"   - Pipeline Ready: {'‚úÖ' if status['ready'] else '‚ùå'}")
    
    # Test v·ªõi m·ªôt message
    if status['ready']:
        print(f"\nüß™ Test v·ªõi message ƒë·∫ßu ti√™n...")
        test_message = test_messages[0]
        result = pipeline.process_message(test_message, test_profile)
        
        print(f"\nüìã K·∫øt qu·∫£:")
        print(f"Intent: {result['intent']['intent']}")
        print(f"Entities: {len(result.get('entities', {}).get('entities', []))}")
        print(f"Drug recommendations: {len(result.get('drug_recommendations', []))}")
        print(f"Risk assessments: {len(result.get('risk_assessments', []))}")
        
        print(f"\nüí¨ Response:")
        print(result['final_response'])
    else:
        print("‚ùå Pipeline ch∆∞a s·∫µn s√†ng ƒë·ªÉ test")